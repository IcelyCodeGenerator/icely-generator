pre {
	"Running ETL Transformation: ".println();
	"----------------------------".println();
	"".println();
	var pimModel;
	var psmModel;
}

rule RESTfulServicePIM2RESTfulServicePSM transform c:ServicePIMMetamodel!RESTfulServicePIM
 	to a:ServicePSMMetamodel!RESTfulServicePSM{
 	guard: c.hasResources.size() > 0
  
	pimModel = c;
 	psmModel = a;
}

rule resource2entity transform c:ServicePIMMetamodel!Resource
  to a:ServicePSMMetamodel!EntityDomain{
  
  guard: c.isAlgorithmic == false
  
  a.name = c.name;
  for (property in c.hasProperty){
	var field = new ServicePSMMetamodel!FieldDomain;
	field.name = property.name;
	field.isUnique = property.isUnique;
	field.isRequired = property.isRequired;
	field.min = property.min;
	field.max = property.max;
	field.type = property.typeName;
	a.fields.add(field);
  }
    
  psmModel.entities.add(a);
  "Entity:: ".println();
  a.println();
}

rule application2application transform c:ServicePIMMetamodel!Application
	to a:ServicePSMMetamodel!Application{
	var config = new ServicePSMMetamodel!Config;
	a.name = c.hasConfig.baseName;
	config.baseName = c.hasConfig.baseName;
	config.servicePort = c.hasConfig.servicePort;
	a.config = config;
	for (resource in c.resources){
		var entity = psmModel.findEntity(resource.name);
		if (entity <> null){
			a.entities.add(entity);
		}
	}
	psmModel.applications.add(a);
	
	"Applications ::".println();
	a.config.println();
}

rule enumeration2enum transform c:ServicePIMMetamodel!Enumeration
	to a:ServicePSMMetamodel!Enum{
	a.name = c.name;
	for (literal in c.literals){
		var newLiteral = new ServicePSMMetamodel!Literal;
		newLiteral.name = literal.name;
		a.literals.add(newLiteral);
	}
	psmModel.enums.add(a);
	
	"Enumerations ::".println();
	a.println();
}

rule relationship2unidirectionalRelationship transform c:ServicePIMMetamodel!Relationship
	to a:ServicePSMMetamodel!UnidirectionalRelationship{
	
	guard: c.multiplicity.name == ServicePIMMetamodel!Multiplicity#ONE_TO_MANY.name or c.multiplicity.name == ServicePIMMetamodel!Multiplicity#MANY_TO_ONE.name

	var multiplicity = c.multiplicity.name;
	var fromRelationshipColumn = new ServicePSMMetamodel!RelationshipColumn;
	
  	a.setMultiplicity(multiplicity);
  	a.fromName = c.fromResource.name;
  	a.toName = c.toResource.name;
  	
  	fromRelationshipColumn.name = a.toName.toLowerCase();
  	var fromEntity = psmModel.findEntity(a.fromName);
  	fromRelationshipColumn.entity = fromEntity;
  	"From Relationship:: ".println();
  	fromRelationshipColumn.println();
  	"From Relationship Entity:: ".println();
  	fromRelationshipColumn.entity.println();
  	a.fromColumn = fromRelationshipColumn;
  	a.toEntity = psmModel.findEntity(a.toName);
  	
  	"Relationship:: ".println();
	a.println();
	fromEntity.relationships.add(a);
}

rule relationship2bidirectionalRelationship transform c:ServicePIMMetamodel!Relationship
	to a:ServicePSMMetamodel!BidirectionalRelationship{
	
	guard: c.multiplicity.name == ServicePIMMetamodel!Multiplicity#MANY_TO_MANY.name or c.multiplicity.name == ServicePIMMetamodel!Multiplicity#ONE_TO_ONE.name

	var multiplicity = c.multiplicity.name;
	var fromRelationshipColumn = new ServicePSMMetamodel!RelationshipColumn;
	var toRelationshipColumn = new ServicePSMMetamodel!RelationshipColumn;
	
  	a.setMultiplicity(multiplicity);
  	a.fromName = c.fromResource.name;
  	a.toName = c.toResource.name;
  	
  	fromRelationshipColumn.name = a.toName.toLowerCase();
  	var fromEntity = jdl.findEntity(a.fromName);
  	fromRelationshipColumn.entity = fromEntity;
  	
  	toRelationshipColumn.name = a.fromName.toLowerCase();
  	toRelationshipColumn.entity = jdl.findEntity(a.toName);
  	
  	a.toEntity = jdl.findEntity(a.toName);

	a.println();
	fromEntity.relationships.add(a);
}

post {
	// set default values
	for (application in psmModel.getApplications()){
		for (entity in application.getEntities()){
			// default dtos
			var dto = new ServicePSMMetamodel!DTO;
			dto.name = entity.name + "DTO";
			dto.dtofields ::= entity.fields;
			application.dtos.add(dto);
			
			// default mappers
			var mapper = new ServicePSMMetamodel!Mapper;
			mapper.name = entity.name + "Mapper";
			mapper.dto = dto;
			mapper.entitydomains.add(entity);
			application.mappers.add(mapper);
			
			// default repositories
			var repository = new ServicePSMMetamodel!Repository;
			repository.name = entity.name + "Repository";
			repository.entitydomain = entity;
			application.repositories.add(repository);
			
			// default services
			var service = new ServicePSMMetamodel!Service;
			service.name = entity.name + "Service";
			service.repositories.add(repository);
			service.mappers.add(mapper);
			repository.entitydomain = entity;
			application.services.add(service);
			
			// default RESTController
			var RESTController = new RESTController;
			RESTController.name = entity.name + "Controller";
			RESTController.services.add(service);
			RESTController.repositories.add(repository);
			RESTController.relativePath = "/" + entity.name.ftlc();
			
			var resource = pimModel.findResource(entity.name);
			resource.println();
			resource.hasActivities.println();
			for(activity in resource.hasActivities){
				var newActivity = new ServicePSMMetamodel!Activity;
				
				if(activity.type.name == "Read"){
					newActivity.name = "getAll" + entity.name.ftuc();
					newActivity.relativePath = "/" + entity.name.ftlc();
					newActivity.type = "Get";
					
					var secondActivity = new ServicePSMMetamodel!Activity;
					secondActivity.name = "get" + entity.name.ftuc();
					secondActivity.relativePath = "/" + entity.name.ftlc() + "/{id}";
					secondActivity.type = "Get";
					RESTController.activities.add(secondActivity);
				} else if (activity.type.name == "Create"){
					newActivity.name = "create" + entity.name.ftuc();
					newActivity.relativePath = "/" + entity.name.ftlc();
					newActivity.type = "Post";
				}  else if (activity.type.name == "Update"){
					newActivity.name = "update" + entity.name.ftuc();
					newActivity.relativePath = "/" + entity.name.ftlc();
					newActivity.type = "Put";
				}  else if (activity.type.name == "Delete"){
					newActivity.name = "delete" + entity.name.ftuc();
					newActivity.relativePath = "/" + entity.name.ftlc() + "/{id}";
					newActivity.type = "Delete";
				}
				
				RESTController.activities.add(newActivity);
			}
			
			for (relationship in resource.hasRelationship){
				var relatedResource = relationship.toResource;
				for(activity in relatedResource.hasActivities){
					var newActivity = new ServicePSMMetamodel!Activity;
				
					if(activity.type.name == "Read"){
						newActivity.name = "getAll" + relatedResource.name.ftuc() + "of" + entity.name.ftuc();
						newActivity.relativePath = "/" + entity.name.ftlc() + "/{id}/" + relatedResource.name.ftlc();
						newActivity.type = "Get";
						
						var secondActivity = new ServicePSMMetamodel!Activity;
						secondActivity.name = "get" + relatedResource.name.ftuc() + "of" + entity.name.ftuc();
						secondActivity.relativePath = "/" + entity.name.ftlc() + "/{id}/" + relatedResource.name.ftlc() + "/{id}";
						secondActivity.type = "Get";
						RESTController.activities.add(secondActivity);
					} else if (activity.type.name == "Create"){
						newActivity.name = "create" + relatedResource.name.ftuc() + "of" + entity.name.ftuc();
						newActivity.relativePath = "/" + entity.name.ftlc() + "/{id}/" + relatedResource.name.ftlc();
						newActivity.type = "Post";
					}  else if (activity.type.name == "Update"){
						newActivity.name = "update" + relatedResource.name.ftuc() + "of" + entity.name.ftuc();
						newActivity.relativePath = "/" + entity.name.ftlc()  + "/{id}/" + relatedResource.name.ftlc();
						newActivity.type = "Put";
					}  else if (activity.type.name == "Delete"){
						newActivity.name = "delete" + relatedResource.name.ftuc() + "of" + entity.name.ftuc();
						newActivity.relativePath = "/" + entity.name.ftlc() + "/{id}" + relatedResource.name.ftlc() + "/{id}";
						newActivity.type = "Delete";
					}
					RESTController.activities.add(newActivity);
				}
			}
			
			application.restcontrollers.add(RESTController);
		}
	}
	
}

operation ServicePSMMetamodel!Relationship setMultiplicity(multiplicity){
	if(multiplicity == ServicePIMMetamodel!Multiplicity#ONE_TO_MANY.name){
  		self.multiplicity = ServicePSMMetamodel!Multiplicity#ONE_TO_MANY;
  	} else if(multiplicity == ServicePIMMetamodel!Multiplicity#MANY_TO_ONE.name){
  		self.multiplicity = ServicePSMMetamodel!Multiplicity#MANY_TO_ONE;
  	} else if(multiplicity == ServicePIMMetamodel!Multiplicity#MANY_TO_MANY.name){
  		self.multiplicity = ServicePSMMetamodel!Multiplicity#MANY_TO_MANY;
  	} else {
  		self.multiplicity = ServicePSMMetamodel!Multiplicity#ONE_TO_ONE;
  	}
}

operation ServicePSMMetamodel!RESTfulServicePSM getApplications(){
	return self.applications;
}

operation ServicePSMMetamodel!RESTfulServicePSM getEntities(){
	return self.entities;
}

operation ServicePSMMetamodel!Application getEntities(){
	return self.entities;
}

operation ServicePSMMetamodel!RESTfulServicePSM findEntity(name:String){
	for (entity in self.entities){
		if (entity.name == name){
			return entity;
		}
	}
}

operation ServicePIMMetamodel!RESTfulServicePIM findResource(name:String){
	for (resource in self.hasResources){
		if (resource.name == name){
			return resource;
		}
	}
}
