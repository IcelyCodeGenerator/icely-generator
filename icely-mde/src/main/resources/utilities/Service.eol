operation Service!Application addModule(name:String){
	var module = new Service!Module;
	module.name = name;
	module.application = self;
	self.modules.add(module);
}

operation Service!Application getDefaultModule(){
	return self.modules.first;
}

operation Service!Application getCommandModule(){
	return self.modules.selectOne(t|t.name=="command");
}

operation Service!Application getQueryModule(){
	return self.modules.selectOne(t|t.name=="^query");
}

operation Service!Application getRestModule(){
	return self.modules.selectOne(t|t.name=="rest");
}

operation Service!Application getEntities(){
	var entities = new OrderedSet<String>();
	for(module in self.modules){
		for(aggregate in module.aggregates){
			entities.addAll(aggregate.domainobjects.select(t|t.type().name=="Entity"));
		}
	}
	return entities;
}

// Resource
operation Service!Service addDependencyIfNotExist(service: Service!Service){
	for (dependency in self.serviceDependencies){
		if(service.name == dependency.name){
			return;
		}
	}
	self.serviceDependencies.add(service);
}

operation Service!Module getService(name: String): Service!Service{
	for (service in self.services){
		if(service.name == name){
			return service;
		}
	}
	return null;
}

operation Service!Module getOrAddService(name: String): Service!Service{
	var service = self.getService(name);
	if (service != null)
		return service;
	service = new Service!Service;
	service.name = name;
	service.module = self;
	self.services.add(service);
	return service;
}

operation Service!Project findPrimitiveType(name: String): Service!PrimitiveType{
	for (type in self.primitivetype){
		if(type.typeName == name){
			return type;
		}
	}
	return null;
}

operation Service!Application findTypeDefinition(name: String): Service!TypeDefinition{
	var primitiveType = self.project.findPrimitiveType(name);
	if (primitiveType != null){
		return primitiveType;
	}
	for (aggregate in self.aggregates){
		for(domainObject in aggregate.domainobjects){
			if(domainObject.typeName == name){
				return domainObject;
			}
		}
	}
	return null;
}

operation Service!Operation addParameter(name:String, type:Service!TypeDefinition){
	var parameter = new Service!Parameter;
	parameter.name = name;
	parameter.type = type;
	self.parameters.add(parameter);
}

operation Service!DomainObject addRepository(){
	var repository = new Service!Repository;
	repository.name = self.name + "Repository";
	repository.aggregateRoot = self;
	self.repository = repository;
}

operation Service!PSMService findApplication(name:String){
	for (application in self.applications){
		if (application.name == name){
			return application;
		}
	}
}

operation Service!Module findAggregate(name:String){
	for (aggregate in self.aggregates){
		if (aggregate.name == name){
			return aggregate;
		}
	}
}

operation Service!Project findApplication(name:String, applicationName:String){
	application = findApplicattion(applicationName);
	for (aggregate in self.aggregates){
		if (aggregate.name == name){
			return aggregate;
		}
	}
}

operation Service!DomainObject setAggregateRoot(){
	if(self.aggregateRoot){
		self.aggregate.aggregateRoot = self;
	}
}

operation Service!DomainObject addDomainObjectToQueryAggregate(application :Service!Application, aggregateName: String){
	var module = application.getQueryModule();
	var aggregate = module.findAggregate(aggregateName);
	self.aggregate = aggregate;
	self.aggregate.domainobjects.add(self);
	self.setAggregateRoot();
}

operation Service!DomainObject addDomainObjectToCommandAggregate(application :Service!Application, aggregateName: String){
	var module = application.getCommandModule();
	var aggregate = module.findAggregate(aggregateName);
	self.aggregate = aggregate;
	self.aggregate.domainobjects.add(self);
	self.setAggregateRoot();
}

operation Service!DomainObject addDomainObjectToDefaultAggregate(application :Service!Application, aggregateName: String){
	var module = application.getDefaultModule();
	var aggregate = module.findAggregate(aggregateName);
	self.aggregate = aggregate;
	self.aggregate.domainobjects.add(self);
	self.setAggregateRoot();
}

operation Service!DomainObject addProperty(name:String, required: Boolean, unique:Boolean, type:Service!TypeDefinition){
	var property = new Service!Property;
	property.name = name;
	property.required = required;
	property.unique = unique;
	property.type = type;
	self.properties.add(property);
}

operation Service!Repository addSubscribe(eventBus:String, topic: String){
	var subscribe = new Service!Subscribe;
	subscribe.eventBus = eventBus;
	subscribe.topic = topic;
	self.subscribe = subscribe;
}

operation Service!Service addSubscribe(eventBus:String, topic: String){
	var subscribe = new Service!Subscribe;
	subscribe.eventBus = eventBus;
	subscribe.topic = topic;
	self.subscribe = subscribe;
}

operation Service!Operation addPublish(eventBus:String, topic: String){
	var publish = new Service!Publish;
	publish.eventBus = eventBus;
	publish.topic = topic;
	self.publish = publish;
}

operation Service!Repository addOperation(name:String, visibility:String, throws:String){
	var soperation = new Service!RepositoryOperation;
	soperation.name = name;
	soperation.visibility = visibility;
	soperation.throws = throws;
	self.operations.add(soperation);
	return soperation;
}

operation Service!Service addOperation(name:String, visibility:String, throws:String){
	var soperation = new Service!Operation;
	soperation.name = name;
	soperation.visibility = visibility;
	soperation.throws = throws;
	self.operations.add(soperation);
	return soperation;
}

// Service

operation Service!Relationship setMultiplicity(multiplicity){
	if(multiplicity == Service!Multiplicity#ONE_TO_MANY.name){
  		self.multiplicity = Service!Multiplicity#ONE_TO_MANY;
  	} else if(multiplicity == Service!Multiplicity#MANY_TO_ONE.name){
  		self.multiplicity = Service!Multiplicity#MANY_TO_ONE;
  	} else if(multiplicity == Service!Multiplicity#MANY_TO_MANY.name){
  		self.multiplicity = Service!Multiplicity#MANY_TO_MANY;
  	} else {
  		self.multiplicity = Service!Multiplicity#ONE_TO_ONE;
  	}
}

operation Service!Project getApplications(){
	return self.applications;
}

operation Service!Project getEntities(){
	return self.entities;
}

operation Service!Application getEntities(){
	return self.entities;
}

operation Service!Project findEntity(name:String){
	for (entity in self.entities){
		if (entity.name == name){
			return entity;
		}
	}
}

operation Service!Project findEntity(name:String, applicationName: String){
	var application = self.findApplication(applicationName);
	return application.findEntity(name);
}

operation Service!Application findEntity(name:String){
	for (entity in self.entities){
		if (entity.name == name){
			return entity;
		}
	}
	return null;
}

operation OrderedSet findCommonApplication(firstApplications, secondApplications){
	var applications = new OrderedSet<String>();
	for (firstApp in firstApplications){
		for(secondApp in secondApplications){
			if (firstApp.hasConfig.baseName == secondApp.hasConfig.baseName){
				applications.add(firstApp.hasConfig.baseName);
			} 
		}
	}
	return applications;
}

operation Service!Project findApplicationIndex(name:String){
	var i = 0;
	for (application in self.applications){
		if (application.name == name){
			return i;
		}
		i++;
	}
	return -1;
}

operation Service!Project findApplication(name:String){
	for (application in self.applications){
		if (application.name == name){
			return application;
		}
	}
}

operation Service!Relation relationshipInstance(){
	if(self.multiplicity.name == Service!Multiplicity#MANY_TO_MANY.name or self.multiplicity.name == Service!Multiplicity#ONE_TO_ONE.name){
		return new Service!BidirectionalRelationship;
	} else if(self.multiplicity.name == Service!Multiplicity#ONE_TO_MANY.name or self.multiplicity.name == Service!Multiplicity#MANY_TO_ONE.name){
		return new Service!UnidirectionalRelationship;
	}
}

operation Service!Module findResource(name:String){
	for (resource in self.hasResources){
		if (resource.name == name){
			return resource;
		}
	}
}