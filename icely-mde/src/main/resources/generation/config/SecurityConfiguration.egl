[%
	import "../../utilities/Service.eol";
%]

package [%=app.basePackage%].config;

import [%=app.basePackage%].config.oauth2.OAuth2JwtAccessTokenConverter;
import [%=app.basePackage%].config.oauth2.OAuth2Properties;
import [%=app.basePackage%].security.oauth2.OAuth2SignatureVerifierClient;
import [%=app.basePackage%].security.AuthoritiesConstants;

import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.cloud.client.loadbalancer.RestTemplateCustomizer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;
import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;
import org.springframework.security.oauth2.provider.token.TokenStore;
import org.springframework.security.oauth2.provider.token.store.JwtAccessTokenConverter;
import org.springframework.security.oauth2.provider.token.store.JwtTokenStore;
import org.springframework.security.web.csrf.CookieCsrfTokenRepository;
import org.springframework.web.client.RestTemplate;

@Configuration
@EnableResourceServer
@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)
public class SecurityConfiguration extends ResourceServerConfigurerAdapter {
    private final OAuth2Properties oAuth2Properties;

    public SecurityConfiguration(OAuth2Properties oAuth2Properties) {
        this.oAuth2Properties = oAuth2Properties;
    }

    @Override
    public void configure(HttpSecurity http) throws Exception {
        http
            .csrf()
            .disable()
            .headers()
            .frameOptions()
            .disable()
        .and()
            .sessionManagement()
            .sessionCreationPolicy(SessionCreationPolicy.STATELESS)
        .and()
            .authorizeRequests()
            .antMatchers("/api/**").authenticated()
            .antMatchers("/management/health").permitAll()
            .antMatchers("/management/info").permitAll()
            .antMatchers("/management/prometheus").permitAll()
            .antMatchers("/management/**").hasAuthority(AuthoritiesConstants.ADMIN) [%=resourcesWithPermissions()%];
    }

    @Bean
    public TokenStore tokenStore(JwtAccessTokenConverter jwtAccessTokenConverter) {
        return new JwtTokenStore(jwtAccessTokenConverter);
    }

    @Bean
    public JwtAccessTokenConverter jwtAccessTokenConverter(OAuth2SignatureVerifierClient signatureVerifierClient) {
        return new OAuth2JwtAccessTokenConverter(oAuth2Properties, signatureVerifierClient);
    }

    @Bean
	@Qualifier("loadBalancedRestTemplate")
    public RestTemplate loadBalancedRestTemplate(RestTemplateCustomizer customizer) {
        RestTemplate restTemplate = new RestTemplate();
        customizer.customize(restTemplate);
        return restTemplate;
    }

    @Bean
    @Qualifier("vanillaRestTemplate")
    public RestTemplate vanillaRestTemplate() {
        return new RestTemplate();
    }
}

[%
operation resourcesWithPermissions(): String{
	var name = "";
	for (resource in app.getRestModule().resources){
		name += resource.getPermission();
	}
	return name;
}


operation Resource getPermission(): String{
	var name = "";
	
	for (permission in self.permissions){
		name += "\n            .antMatchers(\"/" + self.path.relativePath + "**\")";
		switch(permission.type().name){
			case "HasAuthority": {
				name +=  ".hasAuthority(AuthoritiesConstants." + permission.role.name.toUpperCase() + ")";
			}
			case "HasAnyAuthorities":{
				name +=  ".HasAnyAuthorities({" + permission.parametersList() + "})";
			}
			
			case "Authenticated":{
				name +=  ".authenticated()";
			}
			
			case "Access" : {
				name +=  ".access(\"" + permission.access + "\")";
			}
			
			case "PermitAll": {
				name +=  ".PermitAll()";
			}
		}
	}
	
	return name;
}

operation Permission parametersList(): String{
	var string = "";
	var paramSize = self.roles.size();
	for (param in self.roles){
		string += "AuthoritiesConstants." + param.name.toUpperCase();
		if (loopCount != paramSize){
			string += ", ";
		}
	}
	return string;
}
%]
