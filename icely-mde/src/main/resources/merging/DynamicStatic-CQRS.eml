import "../transformation/PIMDomain2PSMService-CQRS.etl";
import "../transformation/PIMDynamic2PSMService-CQRS.etl";
import "../utilities/Service.eol";
import "../utilities/Dynamicview.eol";
import "../utilities/Staticview.eol";

pre {
	var dynamic;
	var static;
	var psmModel;
	var psmConfigModel;
	var psmDepModel;
}

rule Root
	merge l : Dynamicview!Project with r : Staticview!Project into t: Service!Project, c: Configuration!Project, d: Deployment!Project{
	// service
	t.name = r.name;
	t.basePath = r.basePath;
	t.architecture = Service!ArchitectureType#CQRS;
	
	// configuration
	c.name = r.name;
	c.basePath = r.basePath;
	c.architecture = Configuration!ArchitectureType#CQRS;

	var config = new Configuration!ProjectConfig;
	config.version = "1.0.0-SNAPSHOT";
	c.config = config;
	
	// deployment
	d.name = r.name;
	d.basePath = d.basePath;
	
	var deployment = new Deployment!ProjectDeployment;
	d.deployment.add(deployment);
	
	// add gateway application
	var gatewayCApp = addGatewayApplication(t,c,d);
	
	if(l.authenticationType.name == "CENTERALIZED"){
		addUAAApplication(t,c,d);
		gatewayCApp.config.authenticationType = Configuration!AuthenticationType#UAA;
	}
	
	dynamic = l;
	static = r;
	psmModel = t;
	psmConfigModel = c;
	psmDepModel = d;
}

rule ComplexType
	merge l : Dynamicview!ComplexType with r : Staticview!ComplexType into t : Service!ComplexType {
	t.type = r.type.equivalent();
	t.collection = Service!CollectionType#SET;
}

rule Application
	merge l : Dynamicview!Application with r : Staticview!Application into t : Service!Application, c: Configuration!Application, d: Deployment!Application {
	"application".println();
	// service
	t.name = r.name;
	t.basePackage = "org." + r.name.toLowerCase();
	t.project = psmModel;
	
	// configuration
	c.name = r.name;
	c.basePackage = "org." + r.name.toLowerCase();
	c.project = psmConfigModel;
	var config = new Configuration!SculptorConfig;
	config.baseName = c.name;
	config.project_nature = "business-tier";
	c.config = config;
	
	// deployment
	d.name = r.name;
	d.basePackage = "org." + r.name.toLowerCase();
	d.project = psmDepModel;
	
	var deployment = new Deployment!ApplicationDeployment;
	deployment.name = d.name;
	d.deployment.add(deployment);
		
	t.addModule("command");
	t.addModule("^query");
	t.addModule("web");
	
	t.modules.println();
	t.complextypes ::= r.complextypes;
	psmModel.applications.add(t);
}

rule PrimitiveType
	merge l : Dynamicview!PrimitiveType with r : Staticview!PrimitiveType into t : Service!PrimitiveType {
	t.type ::= r.type;
	t.typeName = r.typeName;
	psmModel.primitivetype.add(t);
}

rule Aggregate
	merge l : Dynamicview!Aggregate with r : Staticview!Aggregate into t : Service!Aggregate {
	"aggregate".println();
	t.name = r.name;	
	var application = r.application.equivalent();
	var queryAggregate = new Service!Aggregate;
	queryAggregate.name = t.name;
	queryAggregate.module = application.getQueryModule();
	queryAggregate.module.aggregates.add(queryAggregate);
	queryAggregate.module.aggregates.println();
	
	t.module = application.getCommandModule();
	t.module.aggregates.add(t);
}


rule ValueObject
	merge l : Dynamicview!ValueObject with r : Staticview!ValueObject into t : Service!ValueObject {
	r.println();
	
	t.typeName = r.typeName;
	
	// attributes
	t.name = r.name;
	t.abstract = r.abstract;
	t.aggregateRoot = r.aggregateRoot;
	t.properties ::= r.hasProperty;
	
	t.immutable = r.immutable;
	t.persistent = r.persistent;
	
	if(t.aggregateRoot){
		t.addRepository();
	}
	
	
	t.aggregate = r.aggregate.equivalent();
	t.aggregate.domainobjects.add(t);
	if(t.aggregateRoot){
		t.aggregate.aggregateRoot ::= t;
	}
}

rule BasicType
	merge l : Dynamicview!BasicType with r : Staticview!BasicType into t : Service!BasicType{
	"------- BasicType --------------".println();
	t.typeName = r.typeName;
	
	// attributes
	t.name = r.name;
	t.abstract = r.abstract;
	t.aggregateRoot = r.aggregateRoot;
	t.properties ::= r.hasProperty;
	
	t.immutable = r.immutable;
	t.persistent = r.persistent;
	
	if(t.persistent){
		var repository = new Service!Repository;
		repository.name = t.name + "Repository";
		repository.aggregateRoot = t;
		t.repository = repository;
	}
	
	var aggregate = r.aggregate.equivalent();
	var application = r.aggregate.application.equivalent();
	t.addDomainObjectToCommandAggregate(application, aggregate.name);
	
	if(t.aggregateRoot){
		t.aggregate.aggregateRoot ::= t;
	}
}

rule DomainEvent
	merge l : Dynamicview!DomainEvent with r : Staticview!DomainEvent into t : Service!DomainEvent{
	"------- DomainEvent --------------".println();
	t.typeName = r.typeName;
	
	// attributes
	t.name = r.name;
	t.abstract = r.abstract;
	t.aggregateRoot = r.aggregateRoot;
	t.properties ::= r.hasProperty;
	
	t.immutable = r.immutable;
	t.persistent = r.persistent;
	
	if(t.persistent){
		t.addRepository();
	}
	
	var aggregate = r.aggregate.equivalent();
	var application = r.aggregate.application.equivalent();
	t.addDomainObjectToCommandAggregate(application, aggregate.name);
	
	if(t.aggregateRoot){
		t.aggregate.aggregateRoot ::= t;
	}
}


rule CommandEvent
	merge l : Dynamicview!CommandEvent with r : Staticview!CommandEvent into t : Service!CommandEvent{
	"------- CommandEvent --------------".println();
	t.typeName = r.typeName;
	
	// attributes
	t.name = r.name;
	t.abstract = r.abstract;
	t.aggregateRoot = r.aggregateRoot;
	t.properties ::= r.hasProperty;
	
	t.immutable = r.immutable;
	t.persistent = r.persistent;
	
	if(t.persistent){
		t.addRepository();
	}
	
	var aggregate = r.aggregate.equivalent();
	var application = r.aggregate.application.equivalent();
	t.addDomainObjectToCommandAggregate(application, aggregate.name);
	
	if(t.aggregateRoot){
		t.aggregate.aggregateRoot ::= t;
	}
}

rule DTO
	merge l : Dynamicview!DTO with r : Staticview!DTO into t : Service!DTO{
	"------- DTO --------------".println();
	t.typeName = r.typeName;
	
	// attributes
	t.name = r.name;
	t.abstract = r.abstract;
	t.aggregateRoot = r.aggregateRoot;
	t.properties ::= r.hasProperty;
	
	t.immutable = r.immutable;
	t.persistent = r.persistent;
	
	var aggregate = r.aggregate.equivalent();
	var application = r.aggregate.application.equivalent();
	t.addDomainObjectToQueryAggregate(application, aggregate.name);
}


rule Entity 
	merge l : Dynamicview!Entity with r : Staticview!Entity into t : Service!Entity{
	"------------ entity --------------".println();
	var application = r.aggregate.application.equivalent();
	var aggregate = r.aggregate.equivalent();
	t.typeName = r.typeName;
	
	// attributes
	t.name = r.name;
	t.abstract = r.abstract;
	t.aggregateRoot = r.aggregateRoot;
	t.properties ::= r.hasProperty;
	
	t.scaffold = r.scaffold;
	t.addRepository();
	
	t.addDomainObjectToCommandAggregate(application, aggregate.name);
	if(t.aggregateRoot){
		t.aggregate.aggregateRoot = t;
	}
	
	if (not t.`abstract`){
		var queryEntity = new Service!Entity;
		queryEntity.name = t.name + "Query";
		queryEntity.typeName = t.typeName+ "Query";
		queryEntity.aggregateRoot = t.aggregateRoot;
		
		for (property in t.properties){
			queryEntity.addProperty(property.name, property.required, property.unique, property.type);
		}
		
		var saveOperation = t.repository.addOperation("save", null, null);
		saveOperation.addPublish(null, t.name + "StoreChannel");
		
		queryEntity.addRepository();
		queryEntity.repository.addSubscribe(null, t.name + "StoreChannel");
		queryEntity.addDomainObjectToQueryAggregate(application, aggregate.name);
	}
}

rule Enumeration
	merge l : Dynamicview!Enumeration with r : Staticview!Enumeration into t : Service!Enumeration{
	"------- enumeration --------------".println();
	t.typeName = r.typeName;
	
	// attributes
	t.name = r.name;
	t.abstract = r.abstract;
	t.aggregateRoot = r.aggregateRoot;
	t.properties ::= r.hasProperty;
	
	t.literals ::= r.hasLiteral;
	
	var aggregate = r.aggregate.equivalent();
	var application = r.aggregate.application.equivalent();
	t.addDomainObjectToCommandAggregate(application, aggregate.name);
}

@greedy
rule MergeResource
	merge l : Dynamicview!Resource with r : Staticview!Resource into t : Service!Resource{
	"----------- Resource --------------".println();
	var application = r.aggregate.application.equivalent();
	var path = new Service!Path;
	path.relativePath = r.relativePath();
	t.path = path;
	t.name = r.name;
	
	"Permission".println();
	l.hasPermission.println();
	for(permission in  l.hasPermission){
		var serPermission;
		switch(permission.type().name){
			case "HasAuthority": {
				serPermission = new Service!HasAuthority;
				serPermission.role ::= permission.role;
			}
			case "HasAnyAuthorities":{
				serPermission = new Service!HasAnyAuthorities;
				serPermission.roles ::= permission.roles;
			}
			
			case "Authenticated":{
				serPermission = new Service!Authenticated;
			}
			
			case "Access" : {
				serPermission = new Service!Access;
				serPermission.access = permission.access;
			}
			
			case "PermitAll": {
				serPermission = new Service!PermitAll;
				serPermission.withAllSubresources = permission.withAllSubresources;
			}
		}
		serPermission.println();
		t.permissions.add(serPermission);
	}
	
	t.module = application.getRestModule();
	t.module.resources.add(t);
}

operation addGatewayApplication(serviceProj, confProj, depProj){
	var gateway = new Service!Application;
	gateway.name = "gateway";
	gateway.basePackage = "org." + serviceProj.name.toLowerCase();
	gateway.applicationType = Service!ApplicationType#JHIPSTER_GATEWAY;
	serviceProj.applications.add(gateway);
	
	var gatewayC = new Configuration!Application;
	gatewayC.name = "gateway";
	gatewayC.basePackage = "org." + confProj.name.toLowerCase();
	gatewayC.applicationType = Configuration!ApplicationType#JHIPSTER_GATEWAY;
	
	var config = new Configuration!JhipsterConfig;
	config.baseName = serviceProj.name;
	config.applicationType = Configuration!JhipsterApplicationType#GATEWAY;
	gatewayC.config = config;
	
	confProj.applications.add(gatewayC);
	
	var gatewayD = new Deployment!Application;
	gatewayD.name = "gateway";
	gatewayD.basePackage = "org." + depProj.name.toLowerCase();
	gatewayD.applicationType = Deployment!ApplicationType#JHIPSTER_GATEWAY;
	
	var deployment = new Deployment!ApplicationDeployment;
	deployment.name = gatewayD.name;
	gatewayD.deployment.add(deployment);
	
	depProj.applications.add(gatewayD);
	
	return gatewayC;
}

operation addUAAApplication(serviceProj, confProj, depProj){
	var uaa = new Service!Application;
	uaa.name = "uaa";
	uaa.basePackage = "org." + serviceProj.name.toLowerCase();
	uaa.applicationType = Service!ApplicationType#JHIPSTER_UAA;
	serviceProj.applications.add(uaa);
	
	var uaaC = new Configuration!Application;
	uaaC.name = "uaa";
	uaaC.basePackage = "org." + confProj.name.toLowerCase();
	uaaC.applicationType = Configuration!ApplicationType#JHIPSTER_UAA;
	
	var config = new Configuration!JhipsterConfig;
	config.baseName = serviceProj.name;
	config.applicationType = Configuration!JhipsterApplicationType#UAA;
	config.authenticationType = Configuration!AuthenticationType#UAA;
	uaaC.config = config;
	
	confProj.applications.add(uaaC);
	
	var uaaD = new Deployment!Application;
	uaaD.name = "uaa";
	uaaD.basePackage = "org." + depProj.name.toLowerCase();
	uaaD.applicationType = Deployment!ApplicationType#JHIPSTER_UAA;
	
	var deployment = new Deployment!ApplicationDeployment;
	deployment.name = uaaD.name;
	uaaD.deployment.add(deployment);
	
	depProj.applications.add(uaaD);
}