import "../utilities/JDL.eol";
import "../utilities/Service.eol";

pre {
	"Running ETL Transformation: ".println();
	"----------------------------".println();
	"".println();
	var psm;
	var jdl;
	var config = Configuration!Project.all().first();
	var deployment = Deployment!Project.all().first();
}

rule Project2JDL transform c:Service!Project
 	to a:JDL!JDL{
 	guard: c.applications.size() > 0
 	"-------------- Project2JDL --------------".println();
	psm = c;
 	jdl = a;
}

rule Entity transform c:Service!Entity
	to a:JDL!Entity{
	guard: c.generatedByJHipster == true
	  
	a.name = c.name;
	for (property in c.properties){
		a.addFieldFromProperty(property);
	}
	for (relation in c.relations){
		if(relation.target.type().name == "Enumeration"){
			var property = new Service!Property;
			property.name = relation.name;
			property.unique = false;
			property.required = relation.required;
			property.type = relation.type;
			a.addFieldFromProperty(property);
		}
	}
	jdl.entities.add(a);
	"Entity:: ".println();
	a.println();
}

rule Application transform c:Service!Application
	to a:JDL!Application{
	guard: c.isJhipsterApplication()
	a.name = c.name;
	a.entities ::= c.getEntities();
	a.entities.println();
	jdl.applications.add(a);
	
	"Applications ::".println();
	a.println();
}

rule Config transform c:Configuration!JhipsterConfig
	to a:JDL!Config{
	
	var app = jdl.findApplication(c.application.name);

	a.baseName = c.application.name;
	a.servicePort = c.servicePort;	
	
	switch(c.authenticationType.name){
		case "JWT": a.authenticationType = JDL!AuthenticationType#JWT;
		case "UAA": a.authenticationType = JDL!AuthenticationType#UAA;
		case "SESSION": a.authenticationType = JDL!AuthenticationType#SESSION;
		case "OAUTH2": a.authenticationType = JDL!AuthenticationType#OAUTH2;
	}
	
	switch(c.applicationType.name){
		case "MICROSERVICE": a.applicationType = JDL!ApplicationType#MICROSERVICE;
		case "UAA": a.applicationType = JDL!ApplicationType#UAA;
		case "GATEWAY": a.applicationType = JDL!ApplicationType#GATEWAY;
		case "MONOLITH": a.applicationType = JDL!ApplicationType#MONOLITH;
	}
	
	a.application = app;
	a.application.println();
	a.application.config = a;
	
	a.println();
}

rule Deployment transform c:Deployment!ProjectDeployment
	to a:JDL!Deployment{
	
	a.dockerRepositoryName = c.dockerRepositoryName;
	a.directoryPath = c.directoryPath;
	a.appsFolders = c.appsFolders;
	a.monitoring = c.monitoring;
	a.kubernetesServiceType = c.kubernetesServiceType;
	
	switch(c.serviceDiscoveryType.name){
		case "EUREKA": a.serviceDiscoveryType = JDL!ServiceDiscoveryType#EUREKA;
		case "CONSUL": a.serviceDiscoveryType = JDL!ServiceDiscoveryType#CONSUL;
		case "NO": a.serviceDiscoveryType = JDL!ServiceDiscoveryType#NO;
	}
	
	switch(c.gatewayType.name){
		case "ZUUL": a.gatewayType = JDL!GatewayType#ZUUL;
		case "TRAEFIK": a.gatewayType = JDL!GatewayType#TRAEFIK;
	}
	
	switch(c.deploymentType.name){
		case "DOCKER_COMPOSE": a.deploymentType = JDL!DeploymentType#DOCKER_COMPOSE;
		case "KUBERNETES": a.deploymentType = JDL!DeploymentType#KUBERNETES;
		case "OPENSHIFT": a.deploymentType = JDL!DeploymentType#OPENSHIFT;
	}
	
	a.jdl = jdl;
	a.jdl.deployments.add(a);
	
	a.println();
}

rule Relation2UnidirectionalRelationship transform c:Service!Relation
	to a:JDL!UnidirectionalRelationship{
	guard: c.opposite == null and c.source.isEntityBasedDomainObject() and c.generatedByJHipster == true
	
	var fromRelationshipColumn = new JDL!RelationshipColumn;
	
  	a.setMultiplicityFromRelation(c);
  	a.fromName = c.source.name;
  	a.toName = c.target.name;
  	
  	fromRelationshipColumn.name = c.name;
  	var fromEntity = c.source.equivalent();
  	fromRelationshipColumn.entity = fromEntity;
  	a.fromColumn = fromRelationshipColumn;
  	a.toEntity = c.target.equivalent();
  	
  	"Relationship:: ".println();
	a.println();
	fromEntity.relationships.add(a);
}

rule Relation2BidirectionalRelationship transform c:Service!Relation
	to a:JDL!BidirectionalRelationship{
	guard: c.opposite != null and c.source.isEntityBasedDomainObject() and c.generatedByJHipster == true
	
	var fromRelationshipColumn = new JDL!RelationshipColumn;
	var toRelationshipColumn = new JDL!RelationshipColumn;
	
  	a.setMultiplicityFromRelation(c);
  	a.fromName = c.fromResource.name;
  	a.toName = c.toResource.name;
  	
  	fromRelationshipColumn.name = c.name;
  	var fromEntity = c.source.equivalent();
  	fromRelationshipColumn.entity = fromEntity;
  	
  	toRelationshipColumn.name = c.opposite.name;
  	toRelationshipColumn.entity = c.target.equivalent();
  	
  	a.toEntity = c.target.equivalent();
	"Relationship:: ".println();
	a.println();
	fromEntity.relationships.add(a);
}

rule Literal transform c:Service!Literal
	to a:JDL!Literal{
	a.name = c.name;
	a.value = c.value;
}

rule Enumeration2Enum transform c:Service!Enumeration
	to a:JDL!Enum{
	a.name = c.name;
	a.literals ::= c.literals;
	jdl.enums.add(a);
	"Enumerations ::".println();
	a.println();
}
