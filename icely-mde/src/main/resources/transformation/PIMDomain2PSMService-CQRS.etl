import "../utilities/Staticview.eol";
import "../utilities/Service.eol";
import "./PIMDomain2PSMService.etl";

pre {
	"Running ETL Transformation: ".println();
	"----------------------------".println();
	"".println();
	var pimModel;
	var psmModel;
	
	/* Default Value */
	var optimisticLockingDefault = true;
	var cacheDefault = false;
	var gapClassDefault = false;
}

rule PrimitiveType transform c:Staticview!PrimitiveType
	to a:Service!PrimitiveType extends AbstractPrimitiveType{
}

rule Project transform c:Staticview!Project
 	to a:Service!Project{
 	guard: c.hasApplication.size() > 0
	pimModel = c;
 	psmModel = a;
 	a.primitivetype ::= c.primitiveTypes;
}

rule ComplexType transform c:Staticview!ComplexType
	to a:Service!ComplexType extends AbstractComplexType{
}

rule Application transform c:Staticview!Application
	to a:Service!Application extends AbstractApplication{
	a.addModule("command");
	a.addModule("^query");
	a.addModule("web");
	a.complextypes ::= c.complextypes;
}

rule Aggregate transform c:Staticview!Aggregate
	to a:Service!Aggregate extends AbstractAggregate{
	var application = c.application.equivalent();
	
	var queryAggregate = new Service!Aggregate;
	queryAggregate.name = a.name;
	queryAggregate.module = application.getQueryModule();
	queryAggregate.module.aggregates.add(queryAggregate);
	queryAggregate.module.aggregates.println();
	"hi".println();
	a.module = application.getCommandModule();
	a.module.aggregates.add(a);
	"why".println();
}

rule Property transform c:Staticview!Property
	to a:Service!Property extends AbstractProperty{
	"sP".println();
}

rule BasicType transform c:Staticview!BasicType
	to a:Service!BasicType extends AbstractBasicType{
	"bT".println();
	// aggregate
	var aggregate = c.aggregate.equivalent();
	var application = c.aggregate.application.equivalent();
	a.addDomainObjectToCommandAggregate(application, aggregate.name);
}


rule DomainEvent transform c:Staticview!DomainEvent
	to a:Service!DomainEvent extends AbstractDomainEvent{
	"dE".println();
	var aggregate = c.aggregate.equivalent();
	var application = c.aggregate.application.equivalent();
	a.addDomainObjectToCommandAggregate(application, aggregate.name);
}


rule CommandEvent transform c:Staticview!CommandEvent
	to a:Service!CommandEvent extends AbstractCommandEvent{
	"cE".println();
	var aggregate = c.aggregate.equivalent();
	var application = c.aggregate.application.equivalent();
	a.addDomainObjectToCommandAggregate(application, aggregate.name);
}

rule DTO transform c:Staticview!DTO
	to a:Service!DTO extends AbstractDTO{
	"DTO".println();
	var aggregate = c.aggregate.equivalent();
	var application = c.aggregate.application.equivalent();
	a.addDomainObjectToQueryAggregate(application, aggregate.name);
}


rule ValueObject transform c:Staticview!ValueObject
	to a:Service!ValueObject extends AbstractValueObject{
	"ValuObj".println();
	var aggregate = c.aggregate.equivalent();
	var application = c.aggregate.application.equivalent();
	a.addDomainObjectToCommandAggregate(application, aggregate.name);
}

rule Entity transform c:Staticview!Entity
	to a:Service!Entity extends AbstractEntity{
	"eT".println();
	var aggregate = c.aggregate.equivalent();
	var application = c.aggregate.application.equivalent();
	a.addDomainObjectToCommandAggregate(application, aggregate.name);
	
	// query entity
	if (not a.`abstract`){
		
		var queryEntity = new Service!Entity;
		queryEntity.name = a.name + "Query";
		queryEntity.typeName = a.typeName+ "Query";
		queryEntity.aggregateRoot = a.aggregateRoot;
		for (property in a.properties){
			queryEntity.addProperty(property.name, property.required, property.unique, property.type);
		}
		
		var saveOperation = a.repository.addOperation("save", null, null);
		/*
		saveOperation.addPublish(null, a.name + "StoreChannel");
		
		queryEntity.addRepository();
		queryEntity.repository.addSubscribe(null, a.name + "StoreChannel");
		queryEntity.addDomainObjectToQueryAggregate(application, aggregate.name);
*/
	}
}

rule Literal transform c:Staticview!Literal
	to a:Service!Literal extends AbstractLiteral{
	"lit".println();
}

rule Enumeration transform c:Staticview!Enumeration
	to a:Service!Enumeration extends AbstractEnumeration{
	"e".println();
	var aggregate = c.aggregate.equivalent();
	var application = c.aggregate.application.equivalent();
	a.addDomainObjectToCommandAggregate(application, aggregate.name);
}


rule Relation transform c:Staticview!Relation
	to a:Service!Relation extends AbstractRelation{
}

@greedy
rule Resource transform c:Staticview!Resource
	to a:Service!Resource extends AbstractResource{
}

post {
}


