import "../utilities/Dynamicview.eol";
import "../utilities/Service.eol";
import "./PIMDynamic2PSMService.etl";


pre {
	"Running ETL Transformation: ".println();
	"----------------------------".println();
	"".println();
	var pimModel;
	var psmModel;
}

rule Project transform c:Dynamicview!Project
 	to a:Service!Project extends AbstractProject{
 	guard: c.hasApplication.size() > 0
	pimModel = c;
 	psmModel = a;
}


rule Application transform c:Dynamicview!Application
	to a:Service!Application extends AbstractApplication{
	a.addModule("command");
	a.addModule("^query");
	a.addModule("web");
}

/*
rule primitiveType2primitiveType transform c:Dynamicview!PrimitiveType
	to a:Service!PrimitiveType{
	a.type ::= c.type;
	a.typeName = c.typeName;
	psmModel.primitivetype.add(a);
}
*/


rule Aggregate transform c:Dynamicview!Aggregate
	to a:Service!Aggregate extends AbstractAggregate{
	var application = c.application.equivalent();
	
	var queryAggregate = new Service!Aggregate;
	queryAggregate.name = a.name;
	queryAggregate.module = application.getQueryModule();
	queryAggregate.module.aggregates.add(queryAggregate);
	
	a.module = application.getCommandModule();
	a.module.aggregates.add(a);
}

rule BasicType transform c:Dynamicview!BasicType
	to a:Service!BasicType extends AbstractBasicType{
	var aggregate = c.aggregate.equivalent();
	var application = c.aggregate.application.equivalent();
	a.addDomainObjectToCommandAggregate(application, aggregate.name);
}


rule DomainEvent transform c:Dynamicview!DomainEvent
	to a:Service!DomainEvent extends AbstractDomainEvent{
	var aggregate = c.aggregate.equivalent();
	var application = c.aggregate.application.equivalent();
	a.addDomainObjectToCommandAggregate(application, aggregate.name);
}


rule CommandEvent transform c:Dynamicview!CommandEvent
	to a:Service!CommandEvent extends AbstractCommandEvent{
	var aggregate = c.aggregate.equivalent();
	var application = c.aggregate.application.equivalent();
	a.addDomainObjectToCommandAggregate(application, aggregate.name);
}

rule DTO transform c:Dynamicview!DTO
	to a:Service!DTO extends AbstractDTO{
	var aggregate = c.aggregate.equivalent();
	var application = c.aggregate.application.equivalent();
	a.addDomainObjectToQueryAggregate(application, aggregate.name);
}


rule ValueObject transform c:Dynamicview!ValueObject
	to a:Service!ValueObject extends AbstractValueObject{
	var aggregate = c.aggregate.equivalent();
	var application = c.aggregate.application.equivalent();
	a.addDomainObjectToCommandAggregate(application, aggregate.name);
}

rule Entity transform c:Dynamicview!Entity
	to a:Service!Entity extends AbstractEntity{
	var aggregate = c.aggregate.equivalent();
	var application = c.aggregate.application.equivalent();
	a.addDomainObjectToCommandAggregate(application, aggregate.name);
	
	// query entity
	if (not a.`abstract`){
		var queryEntity = new Service!Entity;
		queryEntity.name = a.name + "Query";
		queryEntity.typeName = a.typeName+ "Query";
		queryEntity.aggregateRoot = a.aggregateRoot;
		
		var saveOperation = a.repository.addOperation("save", null, null);
		saveOperation.addPublish(null, a.name + "StoreChannel");
		
		queryEntity.addRepository();
		queryEntity.repository.addSubscribe(null, a.name + "StoreChannel");
		queryEntity.addDomainObjectToQueryAggregate(application, aggregate.name);
	}
}

rule Enumeration transform c:Dynamicview!Enumeration
	to a:Service!Enumeration extends AbstractEnumeration{
	var aggregate = c.aggregate.equivalent();
	var application = c.aggregate.application.equivalent();
	a.addDomainObjectToCommandAggregate(application, aggregate.name);
}

@greedy
rule Resource transform c:Dynamicview!Resource
	to a:Service!Resource extends AbstractResource{
}

rule Process2Service transform c:Dynamicview!Process
	to a:Service!Service extends AbstractProcess2Service{
}
	
@greedy
rule ProcessOperation2ServiceOperation transform c:Dynamicview!ProcessOperation
	to a:Service!ServiceOperation extends AbstractProcessOperation2ServiceOperation{
	
}

rule Read2resourceOperation transform c:Dynamicview!Read
	to a:Service!ResourceOperation extends AbstractResourceActivity2ResourceOperation{
}

rule Create2resourceOperation transform c:Dynamicview!Create
	to a:Service!ResourceOperation extends AbstractResourceActivity2ResourceOperation{
}

rule Other2ResourceOperation transform c:Dynamicview!Other
	to a:Service!ResourceOperation extends AbstractResourceActivity2ResourceOperation{
}

rule Delete2ResourceOperation transform c:Dynamicview!Delete
	to a:Service!ResourceOperation extends AbstractResourceActivity2ResourceOperation{
}

post {
}
