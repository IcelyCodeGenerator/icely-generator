import "../utilities/Dynamicview.eol";
import "../utilities/Service.eol";

@abstract
rule AbstractProject transform c:Dynamicview!Project
 	to a:Service!Project{
 	guard: c.hasApplication.size() > 0
}

@abstract
rule AbstractApplication transform c:Dynamicview!Application
	to a:Service!Application{
	"-------  Dynamic App -------".println();
	a.name = c.name;
	a.project = c.project.equivalent();
	a.project.applications.add(a);
}

/*
rule primitiveType2primitiveType transform c:Dynamicview!PrimitiveType
	to a:Service!PrimitiveType{
	a.type ::= c.type;
	a.typeName = c.typeName;
	psmModel.primitivetype.add(a);
}
*/

@abstract
rule AbstractAggregate transform c:Dynamicview!Aggregate
	to a:Service!Aggregate{
	a.name = c.name;
	a.aggregateRoot ::= c.aggregateRoot;
}
 
 
@abstract
rule AbstractDomainObject transform c:Dynamicview!DomainObject
	to a:Service!DomainObject{
	"------- Dynamic Domain -------".println();
	// type definition
	a.typeName = c.typeName;
	
	// attributes
	a.name = c.name;
	a.aggregateRoot = c.aggregateRoot;
	
	// references
	// a.hasInheritance ::= c.hasInheritance;	
}

@abstract
rule AbstractionOfValueObject transform c:Dynamicview!ValueObject
	to a:Service!ValueObject extends AbstractDomainObject{
	"------- Dynamic AbstractVaule -------".println();
	c.println();
}

@abstract
rule AbstractBasicType transform c:Dynamicview!BasicType
	to a:Service!BasicType extends AbstractionOfValueObject{
	"------- Dynamic BasicType --------------".println();
	c.println();
}

@abstract
rule AbstractDomainEvent transform c:Dynamicview!DomainEvent
	to a:Service!DomainEvent extends AbstractionOfValueObject{
	"------- DomainEvent --------------".println();
	c.println();
}

@abstract
rule AbstractCommandEvent transform c:Dynamicview!CommandEvent
	to a:Service!CommandEvent extends AbstractionOfValueObject{
	"------- CommandEvent --------------".println();
	c.println();
}

@abstract
rule AbstractDTO transform c:Dynamicview!DTO
	to a:Service!DTO extends AbstractionOfValueObject{
	"------- DTO --------------".println();
	c.println();
}

@abstract
rule AbstractValueObject transform c:Dynamicview!ValueObject
	to a:Service!ValueObject extends AbstractionOfValueObject{
	"------- ValueObject --------------".println();
	c.println();
}

@abstract
rule AbstractEntity transform c:Dynamicview!Entity
	to a:Service!Entity extends AbstractDomainObject{
	"------- entity --------------".println();
	
	c.println();
	
}

@abstract
rule AbstractEnumeration transform c:Dynamicview!Enumeration
	to a:Service!Enumeration extends AbstractDomainObject{
	"------- enumeration --------------".println();
}

@abstract
rule AbstractPublish transform c:Dynamicview!Publish
	to a:Service!Publish{
	"------- Publish --------------".println();
	a.eventType = c.eventType.equivalent();
	if(c.eventType != null)
		a.topic = c.eventType.name + "Channel";
}

@abstract
rule AbstractPolicy2Subscribe transform c:Dynamicview!Policy
	to a:Service!Subscribe{
	"------- Subscribe --------------".println();
	if(c.eventType != null)
		a.topic = c.eventType.name + "Channel";
}

@abstract
rule AbstractRole transform c:Dynamicview!Role
	to a:Service!Role{
	a.name = c.name;
	a.application = c.application.equivalent();
	a.application.roles.add(a);
}

@abstract
rule AbstractResource transform c:Dynamicview!Resource
	to a:Service!Resource{
	"------- Resource iiiiiiiii --------------".println();
	var path = new Service!Path;
	var application = c.aggregate.application.equivalent();
	
	path.relativePath = c.relativePath();
	a.path = path;
	a.name = c.name;
	
	"Permission".println();
	 c.hasPermission.println();
	for(permission in  c.hasPermission){
		var serPermission;
		switch(permission.type()){
			case "HasAuthority": {
				serPermission = new Service!HasAuthority;
				serPermission.role = permission.role;
			}
			case "HasAnyAuthorities":{
				serPermission = new Service!HasAnyAuthorities;
				serPermission.roles ::= permission.roles;
			}
			
			case "Authenticated":{
				serPermission = new Service!Authenticated;
			}
			
			case "Access" : {
				serPermission = new Service!Access;
				serPermission.access = permission.access;
			}
			
			case "PermitAll": {
				serPermission = new Service!PermitAll;
				serPermission.withAllSubresources = permission.withAllSubresources;
			}
		}
		a.permissions.add(serPermission);
	}
	
	a.module = application.getRestModule();
	a.module.resources.add(a);
}

@abstract
rule AbstractProcess2CommandService transform c:Dynamicview!Process
	to a:Service!Service{
	guard: c.hasCommandOperation()
	"------- CommandProcess --------------".println();
	var application = c.aggregate.application.equivalent();
		
	a.name = "Internal" + c.name + "CommandService";
	a.module = application.getCommandModule();
	a.module.services.add(a);
}

@abstract
rule AbstractProcess2QueryService transform c:Dynamicview!Process
	to a:Service!Service{
	guard: c.hasQueryOperation()
	"------- QueryProcess --------------".println();
	var application = c.aggregate.application.equivalent();
		
	a.name = "Internal" + c.name + "QueryService";
	
	a.module = application.getQueryModule();
	a.module.services.add(a);
}
	
@abstract
rule AbstractCommandOperation2ServiceOperation transform c:Dynamicview!CommandOperation
	to a:Service!ServiceOperation{
	"------- CommandOperation --------------".println();
	a.name = c.name;
	a.publish = c.publish.equivalent();
	var application = c.process.aggregate.application.equivalent();
	var module = application.getCommandModule();
	a.service = module.getService("Internal" + c.process.name + "CommandService");
	if(c.returntype != null)
		a.returntype = a.service.module.application.findTypeDefinition(c.returntype.typeName);
		
	for (dynamicParameter in c.hasParameter){
		var type = null;
		if(dynamicParameter.type != null)
			type = a.service.module.application.findTypeDefinition(dynamicParameter.type.typeName);
		a.addParameter(dynamicParameter.name, type);
	}
	//c.policy.println();
	//c.policy.equivalent().println();
	if(c.policy != null)
		a.service.subscribe = c.policy.equivalent();
	a.service.operations.add(a);
}

@abstract
rule AbstractQueryOperation2ServiceOperation transform c:Dynamicview!QueryOperation
	to a:Service!ServiceOperation{
	"------- QueryOperation --------------".println();
	a.name = c.name;
	
	var application = c.process.aggregate.application.equivalent();
	var module = application.getQueryModule();
	
	a.service = module.getService("Internal" + c.process.name + "QueryService");
	if(c.returntype != null)
		a.returntype = a.service.module.application.findTypeDefinition(c.returntype.typeName);
		
	for (dynamicParameter in c.hasParameter){
		var type = null;
		if(dynamicParameter.type != null)
			type = a.service.module.application.findTypeDefinition(dynamicParameter.type.typeName);
		a.addParameter(dynamicParameter.name, type);
	}
	a.service.operations.add(a);
}
	
@abstract
rule AbstractResourceActivity2ResourceOperation transform c:Dynamicview!ResourceActivity
	to a:Service!ResourceOperation{
	"------- ResourceOperation --------------".println();
	var application = c.resource.aggregate.application.equivalent();
	var path = new Service!Path;		
	
	a.name = c.name;
	
	"resource".println();
	a.name.println();
	"".println();
	c.resource.println();
	 
	a.resource = c.resource.equivalent();
	if(c.pathName == null or c.pathName == "")
		path.relativePath = c.resource.relativePath();
	else
		path.relativePath = c.resource.relativePath() + "/" + c.pathName;
	a.path = path;
	a.path.println();
		
	c.trigger.println();
	if(c.trigger != null){
		"HIIIIsds".println();
		var serviceName = "";
		var module = null;
		if (c.trigger.type().name == "CommandOperation"){
			serviceName =  c.trigger.process.name + "CommandService";
			module = application.getCommandModule();
		} else {
			serviceName =  c.trigger.process.name + "QueryService";
			module = application.getQueryModule();
		}
		
		var webservice = module.getOrAddService("External" + serviceName);
		var internalService = module.getOrAddService("Internal" + serviceName);
		a.resource.serviceDependencies.add(webservice);
		
		("Internal" + serviceName).println();
		internalService.println();
		webservice.println();
		"ws".println();
		
		var webserviceOperation = new Service!ServiceOperation;
		webservice.webService = true;
		
		webservice.addDependencyIfNotExist(internalService);
		webserviceOperation.name = a.name;
		webserviceOperation.service = webservice;
		webservice.operations.add(webserviceOperation);
			
		for (dynamicParameter in c.hasParameter){
			var type = null;
			if(dynamicParameter.type != null)
				type = module.application.findTypeDefinition(dynamicParameter.type.typeName);
			webserviceOperation.addParameter(dynamicParameter.name, type);
		}	
	}
		
	for (dynamicParameter in c.hasParameter){
		var type = null;
		if(dynamicParameter.type != null)
			type = a.resource.module.application.findTypeDefinition(dynamicParameter.type.typeName);
		a.addParameter(dynamicParameter.name, type);
	}
		
	if(c.returntype != null){
		a.returntype = a.resource.module.application.findTypeDefinition(c.returntype.typeName);
		a.returntype.println("hi");
	}
	"ews".println();
	a.resource.operations.add(a);
}

@abstract
rule AbstractRead2ResourceOperation transform c:Dynamicview!Read
	to a:Service!ResourceOperation extends AbstractResourceActivity2ResourceOperation{
	"------- ReadResource2ResourceOperation -------".println();
	a.httpMethod = Service!HttpMethod#GET;
}

@abstract
rule AbstractCreate2ResourceOperation transform c:Dynamicview!Create
	to a:Service!ResourceOperation extends AbstractResourceActivity2ResourceOperation{
	"------- CreateResource2ResourceOperation -------".println();
	a.httpMethod = Service!HttpMethod#POST;
}

@abstract
rule AbstractOther2ResourceOperation transform c:Dynamicview!Other
	to a:Service!ResourceOperation extends AbstractResourceActivity2ResourceOperation{
	"------- OtherResource2ResourceOperation -------".println();
	a.httpMethod = Service!HttpMethod#UNDEFINED;
}

@abstract
rule AbstractDelete2ResourceOperation transform c:Dynamicview!Delete
	to a:Service!ResourceOperation extends AbstractResourceActivity2ResourceOperation{
	"------- DeleteResource2ResourceOperation -------".println();
	a.httpMethod = Service!HttpMethod#DELETE;
}


@abstract
rule AbstractProcess2Service transform c:Dynamicview!Process
	to a:Service!Service{
	"------- Process --------------".println();
	var application = c.aggregate.application.equivalent();
	
	a.name = "Internal" + c.name + "Service";
	
	a.module = application.getRestModule();
	a.module.services.add(a);
}