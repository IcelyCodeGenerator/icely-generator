import "../transformation/PIMDomain2PSMService-CQRS.etl";
import "../transformation/PIMDynamic2PSMService-CQRS.etl";
import "../utilities/ServicePSM.eol";
import "../utilities/DynamicPIM.eol";
import "../utilities/Staticview.eol";

pre {
	var dynamic;
	var static;
	var psmModel;
}

rule Root
	merge l : DynamicPIM!Project with r : Staticview!Project into t : ServicePSM!Project {
	t.name = r.name;
	t.basePath = r.basePath;
	t.architecture = ServicePSM!ArchitectureType#CQRS;
	dynamic = l;
	static = r;
	psmModel = t;
}

rule ComplexType
	merge l : DynamicPIM!ComplexType with r : Staticview!ComplexType into t : ServicePSM!ComplexType {
	t.type = r.type.equivalent();
	t.collection = ServicePSM!CollectionType#SET;
}

rule Application
	merge l : DynamicPIM!Application with r : Staticview!Application into t : ServicePSM!Application {
	"application".println();
	t.name = r.name;
	t.project = psmModel;
		
	t.addModule("command");
	t.addModule("^query");
	t.addModule("rest");
	
	t.modules.println();
	t.complextypes ::= r.complextypes;
	psmModel.applications.add(t);
}

rule PrimitiveType
	merge l : DynamicPIM!PrimitiveType with r : Staticview!PrimitiveType into t : ServicePSM!PrimitiveType {
	t.type ::= r.type;
	t.typeName = r.typeName;
	psmModel.primitivetype.add(t);
}

rule Aggregate
	merge l : DynamicPIM!Aggregate with r : Staticview!Aggregate into t : ServicePSM!Aggregate {
	"aggregate".println();
	t.name = r.name;	
	var application = r.application.equivalent();
	var queryAggregate = new ServicePSM!Aggregate;
	queryAggregate.name = t.name;
	queryAggregate.module = application.getQueryModule();
	queryAggregate.module.aggregates.add(queryAggregate);
	queryAggregate.module.aggregates.println();
	
	t.module = application.getCommandModule();
	t.module.aggregates.add(t);
}


rule ValueObject
	merge l : DynamicPIM!ValueObject with r : Staticview!ValueObject into t : ServicePSM!ValueObject {
	r.println();
	
	t.typeName = r.typeName;
	
	// attributes
	t.name = r.name;
	t.abstract = r.abstract;
	t.aggregateRoot = r.aggregateRoot;
	t.properties ::= r.hasProperty;
	
	t.immutable = r.immutable;
	t.persistent = r.persistent;
	
	if(t.aggregateRoot){
		t.addRepository();
	}
	
	
	t.aggregate = r.aggregate.equivalent();
	t.aggregate.domainobjects.add(t);
	if(t.aggregateRoot){
		t.aggregate.aggregateRoot ::= t;
	}
}

rule BasicType
	merge l : DynamicPIM!BasicType with r : Staticview!BasicType into t : ServicePSM!BasicType{
	"------- BasicType --------------".println();
	t.typeName = r.typeName;
	
	// attributes
	t.name = r.name;
	t.abstract = r.abstract;
	t.aggregateRoot = r.aggregateRoot;
	t.properties ::= r.hasProperty;
	
	t.immutable = r.immutable;
	t.persistent = r.persistent;
	
	if(t.persistent){
		var repository = new ServicePSM!Repository;
		repository.name = t.name + "Repository";
		repository.aggregateRoot = t;
		t.repository = repository;
	}
	
	var aggregate = r.aggregate.equivalent();
	var application = r.aggregate.application.equivalent();
	t.addDomainObjectToCommandAggregate(application, aggregate.name);
	
	if(t.aggregateRoot){
		t.aggregate.aggregateRoot ::= t;
	}
}

rule DomainEvent
	merge l : DynamicPIM!DomainEvent with r : Staticview!DomainEvent into t : ServicePSM!DomainEvent{
	"------- DomainEvent --------------".println();
	t.typeName = r.typeName;
	
	// attributes
	t.name = r.name;
	t.abstract = r.abstract;
	t.aggregateRoot = r.aggregateRoot;
	t.properties ::= r.hasProperty;
	
	t.immutable = r.immutable;
	t.persistent = r.persistent;
	
	if(t.persistent){
		t.addRepository();
	}
	
	var aggregate = r.aggregate.equivalent();
	var application = r.aggregate.application.equivalent();
	t.addDomainObjectToCommandAggregate(application, aggregate.name);
	
	if(t.aggregateRoot){
		t.aggregate.aggregateRoot ::= t;
	}
}


rule CommandEvent
	merge l : DynamicPIM!CommandEvent with r : Staticview!CommandEvent into t : ServicePSM!CommandEvent{
	"------- CommandEvent --------------".println();
	t.typeName = r.typeName;
	
	// attributes
	t.name = r.name;
	t.abstract = r.abstract;
	t.aggregateRoot = r.aggregateRoot;
	t.properties ::= r.hasProperty;
	
	t.immutable = r.immutable;
	t.persistent = r.persistent;
	
	if(t.persistent){
		t.addRepository();
	}
	
	var aggregate = r.aggregate.equivalent();
	var application = r.aggregate.application.equivalent();
	t.addDomainObjectToCommandAggregate(application, aggregate.name);
	
	if(t.aggregateRoot){
		t.aggregate.aggregateRoot ::= t;
	}
}

rule DTO
	merge l : DynamicPIM!DTO with r : Staticview!DTO into t : ServicePSM!DTO{
	"------- DTO --------------".println();
	t.typeName = r.typeName;
	
	// attributes
	t.name = r.name;
	t.abstract = r.abstract;
	t.aggregateRoot = r.aggregateRoot;
	t.properties ::= r.hasProperty;
	
	t.immutable = r.immutable;
	t.persistent = r.persistent;
	
	var aggregate = r.aggregate.equivalent();
	var application = r.aggregate.application.equivalent();
	t.addDomainObjectToQueryAggregate(application, aggregate.name);
}


rule Entity 
	merge l : DynamicPIM!Entity with r : Staticview!Entity into t : ServicePSM!Entity{
	"------------ entity --------------".println();
	var application = r.aggregate.application.equivalent();
	var aggregate = r.aggregate.equivalent();
	t.typeName = r.typeName;
	
	// attributes
	t.name = r.name;
	t.abstract = r.abstract;
	t.aggregateRoot = r.aggregateRoot;
	t.properties ::= r.hasProperty;
	
	t.scaffold = r.scaffold;
	t.addRepository();
	
	t.addDomainObjectToCommandAggregate(application, aggregate.name);
	if(t.aggregateRoot){
		t.aggregate.aggregateRoot = t;
	}
	
	if (not t.`abstract`){
		var queryEntity = new ServicePSM!Entity;
		queryEntity.name = t.name + "Query";
		queryEntity.typeName = t.typeName+ "Query";
		queryEntity.aggregateRoot = t.aggregateRoot;
		
		for (property in t.properties){
			queryEntity.addProperty(property.name, property.required, property.unique, property.type);
		}
		
		var saveOperation = t.repository.addOperation("save", null, null);
		saveOperation.addPublish(null, t.name + "StoreChannel");
		
		queryEntity.addRepository();
		queryEntity.repository.addSubscribe(null, t.name + "StoreChannel");
		queryEntity.addDomainObjectToQueryAggregate(application, aggregate.name);
	}
}

rule Enumeration
	merge l : DynamicPIM!Enumeration with r : Staticview!Enumeration into t : ServicePSM!Enumeration{
	"------- enumeration --------------".println();
	t.typeName = r.typeName;
	
	// attributes
	t.name = r.name;
	t.abstract = r.abstract;
	t.aggregateRoot = r.aggregateRoot;
	t.properties ::= r.hasProperty;
	
	t.literals ::= r.hasLiteral;
	
	var aggregate = r.aggregate.equivalent();
	var application = r.aggregate.application.equivalent();
	t.addDomainObjectToCommandAggregate(application, aggregate.name);
}

@greedy
rule MergeResource
	merge l : DynamicPIM!Resource with r : Staticview!Resource into t : ServicePSM!Resource{
	"----------- Resource --------------".println();
	var application = r.aggregate.application.equivalent();
	var path = new ServicePSM!Path;
	path.relativePath = r.relativePath();
	t.path = path;
	t.name = r.name;
	
	t.module = application.getRestModule();
	t.module.resources.add(t);
	
}