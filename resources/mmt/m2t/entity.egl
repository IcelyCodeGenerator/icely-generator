package com.mycompany.myapp.domain;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import javax.persistence.*;

import java.io.Serializable;

@Entity
@Table(name = "[%=entity.name.ftlc()%]")
public class [%=entity.name%] implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

	[% for (field in entity.fields) { %]
	@Column(name = "[%= field.name.ftlc()%]")
	private [%=field.type%] [%=field.name%]
	
	[% } %]
	[% for (relationship in entity.relationships) { %]
	[%= relationship.getMultiplicityAnnotation(entity.name) %]
	[%= relationship.getField(entity.name.ftlc()) %]
	[% } %]

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

	[% for (field in entity.fields) { %]
	[%
		var targetName = field.name.ftuc();
		var targetNameLowerCase = field.name;
		var targetType = field.type;
	%]
    public [%=targetType%] get[%=targetName%]() {
        return [%=targetNameLowerCase%];
    }

    public [%=entity.name%] [%=targetNameLowerCase%]([%=targetType%] [%=targetNameLowerCase%]) {
        this.[%=targetNameLowerCase%] = [%=targetNameLowerCase%];
        return this;
    }

    public void set[%=targetName%]([%=targetType%] [%=targetNameLowerCase%]) {
        this.[%=targetNameLowerCase%] = [%=targetNameLowerCase%];
    }
    
	[% } %]
	[% for (relationship in entity.relationships) { %]
	[%
		var targetName = relationship.getTargetName();
		var targetNameLowerCase = targetName.ftlc();		
	%]
	public [%= targetName %] get[%= targetName %]() {
        return [%= targetNameLowerCase %];
    }

    public [%=entity.name%] [%= targetNameLowerCase %]([%= targetName %] [%= targetNameLowerCase %]) {
        this.[%= targetNameLowerCase %] = [%= targetNameLowerCase %];
        return this;
    }

    public void set[%= targetName %]([%= targetName %] [%= targetNameLowerCase %]) {
        this.[%= targetNameLowerCase %] = [%= targetNameLowerCase %];
    }
	[% } %]
    
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof Bookmark)) {
            return false;
        }
        return id != null && id.equals(((Bookmark) o).id);
    }

    @Override
    public int hashCode() {
        return 31;
    }

    @Override
    public String toString() {
        return "Bookmark{" +
            "id=" + getId() +
            [% for (field in entity.fields) { %]
            ", [%= field.name%]='" + get[%= field.name.ftuc()%]() + "'" +		
			[% } %]
            "}";
    }
}

[%
operation Relationship getMultiplicityAnnotation(parentClassName: String){
	if (self.multiplicity.name == Multiplicity#MANY_TO_ONE.name)
		return "@ManyToOne";
	if (self.multiplicity.name == Multiplicity#MANY_TO_MANY.name)
		return "@ManyToMany";
	if (self.multiplicity.name == Multiplicity#ONE_TO_MANY.name){
		return "@OneToMany(mappedBy="+parentClassName+")";
		}
	if (self.multiplicity.name == Multiplicity#ONE_TO_ONE.name)
		return "@OneToOne";
	return "ERROR";	
}	

operation Relationship getField(parentClassName: String){
	var targetEntityName = self.getTargetName();
		
	if (self.multiplicity.name == Multiplicity#MANY_TO_ONE.name)
		return "@ManyToOne";
	if (self.multiplicity.name == Multiplicity#MANY_TO_MANY.name)
		return "@ManyToMany";
	if (self.multiplicity.name == Multiplicity#ONE_TO_MANY.name)
		return "private Set<"+ targetEntityName +"> " + targetEntityName.ftlc();
	if (self.multiplicity.name == Multiplicity#ONE_TO_ONE.name)
		return "@OneToOne";
	return "ERROR";	
}

operation Relationship getTargetName(){
	if (self.type.name == "UnidirectionalRelationship")
		return self.toEntity.name;
	else if (self.type.name == "BidirectionalRelationship")
		return self.toColumn.name;
}		
%]
