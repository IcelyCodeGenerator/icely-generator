pre {
	"Running ETL Transformation: ".println();
	"----------------------------".println();
	"".println();
	var pimModel = new ServicePIMMetamodel!RESTfulServicePIM;
	var jdl = new JDL!JDLPIM;
}

rule resource2entity transform c:ServicePIMMetamodel!Resource
  to a:JDL!Entity{
  
  guard: c.isAlgorithmic == false
  
  a.name = c.name;
  for (property in c.hasProperty){
	var field = new JDL!Field;
	field.name = property.name;
	field.isUnique = property.isUnique;
	field.isRequired = property.isRequired;
	field.min = property.min;
	field.max = property.max;
	field.type = property.typeName;
	property.type.println();
	a.fields.add(field);
  }
  
  jdl.entities.add(a);
  "Entity:: ".println();
  a.println();
}

rule application2application transform c:ServicePIMMetamodel!Application
	to a:JDL!Application{
	var config = new JDL!Config;
	config.baseName = c.hasConfig.baseName;
	config.servicePort = c.hasConfig.servicePort;
	a.config = config;
	for (resource in c.resources){
		var entity = jdl.findEntity(resource.name);
		if (entity <> null){
			a.entities.add(entity);
		}
	}
	jdl.applications.add(a);
	
	"Applications ::".println();
	a.config.println();
}

rule enumeration2enum transform c:ServicePIMMetamodel!Enumeration
	to a:JDL!Enum{
	a.name = c.name;
	for (literal in c.literals){
		var newLiteral = new JDL!Literal;
		newLiteral.name = literal.name;
		a.literals.add(newLiteral);
	}
	jdl.enums.add(a);
	
	"Enumerations ::".println();
	a.println();
}

rule relationship2unidirectionalRelationship transform c:ServicePIMMetamodel!Relationship
	to a:JDL!UnidirectionalRelationship{
	
	guard: c.multiplicity.name == ServicePIMMetamodel!Multiplicity#ONE_TO_MANY.name or c.multiplicity.name == ServicePIMMetamodel!Multiplicity#MANY_TO_ONE.name

	var multiplicity = c.multiplicity.name;
	var fromRelationshipColumn = new JDL!RelationshipColumn;
	
  	a.setMultiplicity(multiplicity);
  	a.fromName = c.fromResource.name;
  	a.toName = c.toResource.name;
  	
  	fromRelationshipColumn.name = a.toName.toLowerCase();
  	var fromEntity = jdl.findEntity(a.fromName);
  	fromRelationshipColumn.entity = fromEntity;
  	"From Relationship:: ".println();
  	fromRelationshipColumn.println();
  	"From Relationship Entity:: ".println();
  	fromRelationshipColumn.entity.println();
  	a.fromColumn = fromRelationshipColumn;
  	a.toEntity = jdl.findEntity(a.toName);
  	
  	"Relationship:: ".println();
	a.println();
	fromEntity.relationships.add(a);
}

rule relationship2bidirectionalRelationship transform c:ServicePIMMetamodel!Relationship
	to a:JDL!BidirectionalRelationship{
	
	guard: c.multiplicity.name == ServicePIMMetamodel!Multiplicity#MANY_TO_MANY.name or c.multiplicity.name == ServicePIMMetamodel!Multiplicity#ONE_TO_ONE.name

	var multiplicity = c.multiplicity.name;
	var fromRelationshipColumn = new JDL!RelationshipColumn;
	var toRelationshipColumn = new JDL!RelationshipColumn;
	
  	a.setMultiplicity(multiplicity);
  	a.fromName = c.fromResource.name;
  	a.toName = c.toResource.name;
  	
  	fromRelationshipColumn.name = a.toName.toLowerCase();
  	var fromEntity = jdl.findEntity(a.fromName);
  	fromRelationshipColumn.entity = fromEntity;
  	
  	toRelationshipColumn.name = a.fromName.toLowerCase();
  	toRelationshipColumn.entity = jdl.findEntity(a.toName);
  	
  	a.toEntity = jdl.findEntity(a.toName);

	a.println();
	fromEntity.relationships.add(a);
}

operation JDL!Relationship setMultiplicity(multiplicity){
	if(multiplicity == ServicePIMMetamodel!Multiplicity#ONE_TO_MANY.name){
  		self.multiplicity = JDL!Multiplicity#ONE_TO_MANY;
  	} else if(multiplicity == ServicePIMMetamodel!Multiplicity#MANY_TO_ONE.name){
  		self.multiplicity = JDL!Multiplicity#MANY_TO_ONE;
  	} else if(multiplicity == ServicePIMMetamodel!Multiplicity#MANY_TO_MANY.name){
  		self.multiplicity = JDL!Multiplicity#MANY_TO_MANY;
  	} else {
  		self.multiplicity = JDL!Multiplicity#ONE_TO_ONE;
  	}
}

operation JDL!JDLPIM findEntity(name:String){
	for (entity in self.entities){
		if (entity.name == name){
			return entity;
		}
	}
}
