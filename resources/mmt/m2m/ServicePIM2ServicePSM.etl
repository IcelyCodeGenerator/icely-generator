pre {
	"Running ETL Transformation: ".println();
	"----------------------------".println();
	"".println();
	var pimModel;
	var psmModel;
}

rule RESTfulServicePIM2RESTfulServicePSM transform c:ServicePIMMetamodel!RESTfulServicePIM
 	to a:ServicePSMMetamodel!RESTfulServicePSM{
 	guard: c.hasResources.size() > 0
  
	pimModel = c;
 	psmModel = a;
}

rule application2application transform c:ServicePIMMetamodel!Application
	to a:ServicePSMMetamodel!Application{
	var config = new ServicePSMMetamodel!Config;
	a.name = c.hasConfig.baseName;
	config.baseName = c.hasConfig.baseName;
	config.servicePort = c.hasConfig.servicePort;
	a.config = config;
	
	for(pimResource in c.resources){
		if (pimResource.isAlgorithmic == false) {
			var entity = new ServicePSMMetamodel!EntityDomain;
			entity.name = pimResource.name;
			for (property in pimResource.hasProperty) {
				var field = new ServicePSMMetamodel!FieldDomain;
				field.name = property.name;
				field.isUnique = property.isUnique;
				field.isRequired = property.isRequired;
				field.min = property.min;
				field.max = property.max;
				field.type = property.typeName;
				entity.fields.add(field);
		  	}
		  	
		  	entity.application = a;
		  	a.entities.add(entity);
		}
	}
	
	"Relationships: ".println();
	"----------------------------".println();
	
	for(pimResource in c.resources){
		for(relationship in pimResource.hasRelationship){
			if ( a.findEntity(relationship.fromResource.name) == null or
				 a.findEntity(relationship.toResource.name) == null ){
				continue;	 
			}
			
			var newRelationship =  relationship.relationshipInstance();
			var multiplicity = relationship.multiplicity.name;
			var fromRelationshipColumn = new ServicePSMMetamodel!RelationshipColumn;
				
			newRelationship.setMultiplicity(multiplicity);
			newRelationship.fromName = relationship.fromResource.name;
			newRelationship.toName = relationship.toResource.name;			  	
			fromRelationshipColumn.name = newRelationship.toName.toLowerCase();
			  	
			var fromEntity = a.findEntity(newRelationship.fromName);
			fromEntity.println("From Entity:: ");
			fromRelationshipColumn.entity = fromEntity;
			newRelationship.fromColumn = fromRelationshipColumn;
			newRelationship.toEntity = a.findEntity(newRelationship.toName);
			  	
			"Relationship:: ".println();
			newRelationship.println();
			fromEntity.relationships.add(newRelationship);
		}
	}
	
	psmModel.applications.add(a);
	
	"----------------------------".println();
	
	"Applications ::".println();
	a.config.println();
}


rule enumeration2enum transform c:ServicePIMMetamodel!Enumeration
	to a:ServicePSMMetamodel!Enum{
	a.name = c.name;
	for (literal in c.literals){
		var newLiteral = new ServicePSMMetamodel!Literal;
		newLiteral.name = literal.name;
		a.literals.add(newLiteral);
	}
	psmModel.enums.add(a);
	
	"Enumerations ::".println();
	a.println();
}

/* 
rule relationship2bidirectionalRelationship transform c:ServicePIMMetamodel!Relationship
	to a:ServicePSMMetamodel!BidirectionalRelationship{
	
	guard: c.multiplicity.name == ServicePIMMetamodel!Multiplicity#MANY_TO_MANY.name or c.multiplicity.name == ServicePIMMetamodel!Multiplicity#ONE_TO_ONE.name

	var multiplicity = c.multiplicity.name;
	var fromRelationshipColumn = new ServicePSMMetamodel!RelationshipColumn;
	var toRelationshipColumn = new ServicePSMMetamodel!RelationshipColumn;
	
  	a.setMultiplicity(multiplicity);
  	a.fromName = c.fromResource.name;
  	a.toName = c.toResource.name;
  	
  	fromRelationshipColumn.name = a.toName.toLowerCase();
  	var fromEntity = jdl.findEntity(a.fromName);
  	fromRelationshipColumn.entity = fromEntity;
  	
  	toRelationshipColumn.name = a.fromName.toLowerCase();
  	toRelationshipColumn.entity = jdl.findEntity(a.toName);
  	
  	a.toEntity = jdl.findEntity(a.toName);

	a.println();
	fromEntity.relationships.add(a);
}
*/

post {
	// set default values
	for (application in psmModel.getApplications()){
		for (entity in application.getEntities()){
			// default dtos
			var dto = new ServicePSMMetamodel!DTO;
			dto.name = entity.name + "DTO";
			dto.dtofields ::= entity.fields;
			dto.application = application;
			application.dtos.add(dto);
			
			// default mappers
			var mapper = new ServicePSMMetamodel!Mapper;
			mapper.name = entity.name + "Mapper";
			mapper.dto = dto;
			mapper.entitydomains.add(entity);
			mapper.application = application;
			application.mappers.add(mapper);
			
			// default repositories
			var repository = new ServicePSMMetamodel!Repository;
			repository.name = entity.name + "Repository";
			repository.entitydomain = entity;
			repository.application = application;
			application.repositories.add(repository);
			
			// default services
			var service = new ServicePSMMetamodel!Service;
			service.name = entity.name + "Service";
			service.repositories.add(repository);
			service.mappers.add(mapper);
			service.application = application;
			application.services.add(service);
			
			// default RESTController
			var RESTController = new RESTController;
			RESTController.name = entity.name + "Controller";
			RESTController.services.add(service);
			RESTController.repositories.add(repository);
			RESTController.relativePath = "/" + entity.name.ftlc();
			RESTController.application = application;
			
			var resource = pimModel.findResource(entity.name);
			resource.println();
			resource.hasActivities.println();
			for(activity in resource.hasActivities){
				var newActivity = new ServicePSMMetamodel!Activity;
				
				if(activity.type.name == "Read"){
					newActivity.name = "getAll" + entity.name.ftuc();
					newActivity.relativePath = "/" + entity.name.ftlc();
					newActivity.type = "Get";
					
					var secondActivity = new ServicePSMMetamodel!Activity;
					secondActivity.name = "get" + entity.name.ftuc();
					secondActivity.relativePath = "/" + entity.name.ftlc() + "/{id}";
					secondActivity.type = "Get";
					RESTController.activities.add(secondActivity);
				} else if (activity.type.name == "Create"){
					newActivity.name = "create" + entity.name.ftuc();
					newActivity.relativePath = "/" + entity.name.ftlc();
					newActivity.type = "Post";
				}  else if (activity.type.name == "Update"){
					newActivity.name = "update" + entity.name.ftuc();
					newActivity.relativePath = "/" + entity.name.ftlc();
					newActivity.type = "Put";
				}  else if (activity.type.name == "Delete"){
					newActivity.name = "delete" + entity.name.ftuc();
					newActivity.relativePath = "/" + entity.name.ftlc() + "/{id}";
					newActivity.type = "Delete";
				}
				
				RESTController.activities.add(newActivity);
			}
			
			for (relationship in resource.hasRelationship){
				var relatedResource = relationship.toResource;
				for(activity in relatedResource.hasActivities){
					var newActivity = new ServicePSMMetamodel!Activity;
				
					if(activity.type.name == "Read"){
						newActivity.name = "getAll" + relatedResource.name.ftuc() + "of" + entity.name.ftuc();
						newActivity.relativePath = "/" + entity.name.ftlc() + "/{id}/" + relatedResource.name.ftlc();
						newActivity.type = "Get";
						
						var secondActivity = new ServicePSMMetamodel!Activity;
						secondActivity.name = "get" + relatedResource.name.ftuc() + "of" + entity.name.ftuc();
						secondActivity.relativePath = "/" + entity.name.ftlc() + "/{id}/" + relatedResource.name.ftlc() + "/{id}";
						secondActivity.type = "Get";
						RESTController.activities.add(secondActivity);
					} else if (activity.type.name == "Create"){
						newActivity.name = "create" + relatedResource.name.ftuc() + "of" + entity.name.ftuc();
						newActivity.relativePath = "/" + entity.name.ftlc() + "/{id}/" + relatedResource.name.ftlc();
						newActivity.type = "Post";
					}  else if (activity.type.name == "Update"){
						newActivity.name = "update" + relatedResource.name.ftuc() + "of" + entity.name.ftuc();
						newActivity.relativePath = "/" + entity.name.ftlc()  + "/{id}/" + relatedResource.name.ftlc();
						newActivity.type = "Put";
					}  else if (activity.type.name == "Delete"){
						newActivity.name = "delete" + relatedResource.name.ftuc() + "of" + entity.name.ftuc();
						newActivity.relativePath = "/" + entity.name.ftlc() + "/{id}" + relatedResource.name.ftlc() + "/{id}";
						newActivity.type = "Delete";
					}
					RESTController.activities.add(newActivity);
				}
			}
			
			application.restcontrollers.add(RESTController);
		}
	}
	
}

operation ServicePSMMetamodel!Relationship setMultiplicity(multiplicity){
	if(multiplicity == ServicePIMMetamodel!Multiplicity#ONE_TO_MANY.name){
  		self.multiplicity = ServicePSMMetamodel!Multiplicity#ONE_TO_MANY;
  	} else if(multiplicity == ServicePIMMetamodel!Multiplicity#MANY_TO_ONE.name){
  		self.multiplicity = ServicePSMMetamodel!Multiplicity#MANY_TO_ONE;
  	} else if(multiplicity == ServicePIMMetamodel!Multiplicity#MANY_TO_MANY.name){
  		self.multiplicity = ServicePSMMetamodel!Multiplicity#MANY_TO_MANY;
  	} else {
  		self.multiplicity = ServicePSMMetamodel!Multiplicity#ONE_TO_ONE;
  	}
}

operation ServicePSMMetamodel!RESTfulServicePSM getApplications(){
	return self.applications;
}

operation ServicePSMMetamodel!RESTfulServicePSM getEntities(){
	return self.entities;
}

operation ServicePSMMetamodel!Application getEntities(){
	return self.entities;
}

operation ServicePSMMetamodel!RESTfulServicePSM findEntity(name:String){
	for (entity in self.entities){
		if (entity.name == name){
			return entity;
		}
	}
}

operation ServicePSMMetamodel!RESTfulServicePSM findEntity(name:String, applicationName: String){
	var application = self.findApplication(applicationName);
	return application.findEntity(name);
}

operation ServicePSMMetamodel!Application findEntity(name:String){
	"".println();
	self.println("appliction entity's: ");
	name.println("entity was wanted: ");
	self.entities.println("entities: ");
	for (entity in self.entities){
		entity.println("entity name: ");
		if (entity.name == name){
			return entity;
		}
	}
	return null;
}

operation OrderedSet findCommonApplication(firstApplications, secondApplications){
	var applications = new OrderedSet<String>();
	for (firstApp in firstApplications){
		for(secondApp in secondApplications){
			if (firstApp.hasConfig.baseName == secondApp.hasConfig.baseName){
				applications.add(firstApp.hasConfig.baseName);
			} 
		}
	}
	return applications;
}

operation ServicePSMMetamodel!RESTfulServicePSM findApplicationIndex(name:String){
	var i = 0;
	for (application in self.applications){
		if (application.name == name){
			return i;
		}
		i++;
	}
	return -1;
}

operation ServicePSMMetamodel!RESTfulServicePSM findApplication(name:String){
	for (application in self.applications){
		if (application.name == name){
			return application;
		}
	}
}

operation ServicePIMMetamodel!Relationship relationshipInstance(){
	if(self.multiplicity.name == ServicePIMMetamodel!Multiplicity#MANY_TO_MANY.name or self.multiplicity.name == ServicePIMMetamodel!Multiplicity#ONE_TO_ONE.name){
		return new ServicePSMMetamodel!BidirectionalRelationship;
	} else if(self.multiplicity.name == ServicePIMMetamodel!Multiplicity#ONE_TO_MANY.name or self.multiplicity.name == ServicePIMMetamodel!Multiplicity#MANY_TO_ONE.name){
		return new ServicePSMMetamodel!UnidirectionalRelationship;
	}
}

operation ServicePIMMetamodel!RESTfulServicePIM findResource(name:String){
	for (resource in self.hasResources){
		if (resource.name == name){
			return resource;
		}
	}
}
